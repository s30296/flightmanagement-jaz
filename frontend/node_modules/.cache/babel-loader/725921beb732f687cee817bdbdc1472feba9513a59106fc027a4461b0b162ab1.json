{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Patryk\\\\Desktop\\\\Files\\\\Education\\\\PROJEKT\\\\flightmanagement\\\\frontend\\\\src\\\\FlightForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlightForm({\n  fetchFlights\n}) {\n  _s();\n  const [flightNumber, setFlightNumber] = useState('');\n  const [flightLength, setFlightLength] = useState('');\n  const [departureTime, setDepartureTime] = useState('');\n  const [departureAirportId, setDepartureAirportId] = useState('');\n  const [arrivalAirportId, setArrivalAirportId] = useState('');\n  const [weather, setWeather] = useState(null);\n\n  // Funkcja do pobierania pogody z API na podstawie ID lotniska\n  const fetchWeather = async airportId => {\n    try {\n      // Zmienna `airportId` powinna być powiązana z rzeczywistymi ID lotnisk\n      // Pobierz dane o lotnisku za pomocą ID, aby uzyskać miasto i kraj\n      const airportResponse = await axios.get(`http://localhost:8080/airports/${airportId}`);\n      const airport = airportResponse.data;\n\n      // Wykonaj zapytanie do API pogodowego, używając miasta i kraju\n      const weatherResponse = await axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${airport.city.name},${airport.city.country}&appid=YOUR_API_KEY&units=metric`);\n      setWeather(weatherResponse.data);\n    } catch (error) {\n      console.error('Błąd podczas pobierania pogody:', error);\n      setWeather(null); // W razie błędu ustaw pusty stan\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:8080/flights/create', {\n        flightNumber,\n        flightLength,\n        departureTime,\n        departureAirportId,\n        arrivalAirportId\n      });\n      console.log(\"Lot utworzony:\", response.data);\n      fetchFlights();\n    } catch (error) {\n      console.error('Błąd tworzenia lotu:', error);\n    }\n  };\n\n  // Trigger do pobrania pogody po wpisaniu ID lotniska odlotu\n  const handleDepartureAirportChange = e => {\n    const airportId = e.target.value;\n    setDepartureAirportId(airportId);\n    if (airportId) {\n      fetchWeather(airportId);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Dodaj nowy lot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Numer lotu\",\n        value: flightNumber,\n        onChange: e => setFlightNumber(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Czas trwania\",\n        value: flightLength,\n        onChange: e => setFlightLength(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        value: departureTime,\n        onChange: e => setDepartureTime(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"ID lotniska odlotu\",\n        value: departureAirportId,\n        onChange: handleDepartureAirportChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"ID lotniska przylotu\",\n        value: arrivalAirportId,\n        onChange: e => setArrivalAirportId(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Dodaj lot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Pogoda na lotnisku odlotu (\", weather.name, \"):\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Opis:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 24\n        }, this), \" \", weather.weather[0].description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Temperatura:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 24\n        }, this), \" \", weather.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Wiatr:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 24\n        }, this), \" \", weather.wind.speed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(FlightForm, \"zUIlA0+J857DnTbkYPUVqlMkiFY=\");\n_c = FlightForm;\nexport default FlightForm;\nvar _c;\n$RefreshReg$(_c, \"FlightForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","FlightForm","fetchFlights","_s","flightNumber","setFlightNumber","flightLength","setFlightLength","departureTime","setDepartureTime","departureAirportId","setDepartureAirportId","arrivalAirportId","setArrivalAirportId","weather","setWeather","fetchWeather","airportId","airportResponse","get","airport","data","weatherResponse","city","name","country","error","console","handleSubmit","e","preventDefault","response","post","log","handleDepartureAirportChange","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","className","description","main","temp","wind","speed","_c","$RefreshReg$"],"sources":["C:/Users/Patryk/Desktop/Files/Education/PROJEKT/flightmanagement/frontend/src/FlightForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction FlightForm({ fetchFlights }) {\r\n    const [flightNumber, setFlightNumber] = useState('');\r\n    const [flightLength, setFlightLength] = useState('');\r\n    const [departureTime, setDepartureTime] = useState('');\r\n    const [departureAirportId, setDepartureAirportId] = useState('');\r\n    const [arrivalAirportId, setArrivalAirportId] = useState('');\r\n    const [weather, setWeather] = useState(null);\r\n\r\n    // Funkcja do pobierania pogody z API na podstawie ID lotniska\r\n    const fetchWeather = async (airportId) => {\r\n        try {\r\n            // Zmienna `airportId` powinna być powiązana z rzeczywistymi ID lotnisk\r\n            // Pobierz dane o lotnisku za pomocą ID, aby uzyskać miasto i kraj\r\n            const airportResponse = await axios.get(`http://localhost:8080/airports/${airportId}`);\r\n            const airport = airportResponse.data;\r\n\r\n            // Wykonaj zapytanie do API pogodowego, używając miasta i kraju\r\n            const weatherResponse = await axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${airport.city.name},${airport.city.country}&appid=YOUR_API_KEY&units=metric`);\r\n            setWeather(weatherResponse.data);\r\n        } catch (error) {\r\n            console.error('Błąd podczas pobierania pogody:', error);\r\n            setWeather(null); // W razie błędu ustaw pusty stan\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await axios.post('http://localhost:8080/flights/create', {\r\n                flightNumber,\r\n                flightLength,\r\n                departureTime,\r\n                departureAirportId,\r\n                arrivalAirportId\r\n            });\r\n            console.log(\"Lot utworzony:\", response.data);\r\n            fetchFlights();\r\n        } catch (error) {\r\n            console.error('Błąd tworzenia lotu:', error);\r\n        }\r\n    };\r\n\r\n    // Trigger do pobrania pogody po wpisaniu ID lotniska odlotu\r\n    const handleDepartureAirportChange = (e) => {\r\n        const airportId = e.target.value;\r\n        setDepartureAirportId(airportId);\r\n        if (airportId) {\r\n            fetchWeather(airportId);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Dodaj nowy lot</h3>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Numer lotu\"\r\n                    value={flightNumber}\r\n                    onChange={(e) => setFlightNumber(e.target.value)}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    placeholder=\"Czas trwania\"\r\n                    value={flightLength}\r\n                    onChange={(e) => setFlightLength(e.target.value)}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"datetime-local\"\r\n                    value={departureTime}\r\n                    onChange={(e) => setDepartureTime(e.target.value)}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    placeholder=\"ID lotniska odlotu\"\r\n                    value={departureAirportId}\r\n                    onChange={handleDepartureAirportChange}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    placeholder=\"ID lotniska przylotu\"\r\n                    value={arrivalAirportId}\r\n                    onChange={(e) => setArrivalAirportId(e.target.value)}\r\n                    required\r\n                />\r\n                <button type=\"submit\">Dodaj lot</button>\r\n            </form>\r\n\r\n            {weather && (\r\n                <div className=\"weather-info\">\r\n                    <h4>Pogoda na lotnisku odlotu ({weather.name}):</h4>\r\n                    <p><strong>Opis:</strong> {weather.weather[0].description}</p>\r\n                    <p><strong>Temperatura:</strong> {weather.main.temp}°C</p>\r\n                    <p><strong>Wiatr:</strong> {weather.wind.speed} m/s</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FlightForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}